#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Data Extractors Corrigido - VERS√ÉO COM DETEC√á√ÉO MELHORADA DE RESULTADOS
Corrige problemas de detec√ß√£o de resultados que existem mas n√£o s√£o encontrados
"""

import os
import re
import time
import requests
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from PIL import Image, ImageEnhance, ImageFilter
import pytesseract
from io import BytesIO
from ..models.resultado_oab import ResultadoOAB

class DataExtractorCorrigido:
    """Classe respons√°vel pela extra√ß√£o de dados das p√°ginas - VERS√ÉO CORRIGIDA"""
    
    def __init__(self, driver, wait, pasta_debug=None):
        self.driver = driver
        self.wait = wait
        self.pasta_debug = pasta_debug
        
        # Configurar Tesseract OCR
        self._configurar_tesseract()
        
        print("üîß DataExtractor inicializado com detec√ß√£o melhorada")

    def _configurar_tesseract(self):
        """Configura o Tesseract OCR"""
        try:
            configs_tesseract = [
                "C:\\Program Files\\Tesseract-OCR\\tesseract.exe",  # Windows
                "/usr/bin/tesseract",  # Linux
                "/opt/homebrew/bin/tesseract",  # macOS
                "tesseract"  # PATH do sistema
            ]
            
            for config in configs_tesseract:
                try:
                    pytesseract.pytesseract.tesseract_cmd = config
                    pytesseract.get_tesseract_version()
                    print(f"‚úÖ Tesseract configurado: {config}")
                    
                    try:
                        idiomas = pytesseract.get_languages()
                        if 'por' in idiomas:
                            self.idioma_ocr = 'por'
                            print("üáßüá∑ ‚úÖ Usando idioma PORTUGU√äS")
                        else:
                            self.idioma_ocr = 'eng'
                            print("üá∫üá∏ ‚ö†Ô∏è Usando idioma ingl√™s")
                    except:
                        self.idioma_ocr = 'eng'
                    
                    return True
                except:
                    continue
            
            print("‚ùå Tesseract n√£o encontrado!")
            return False
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao configurar Tesseract: {e}")
            self.idioma_ocr = 'eng'
            return False

    def definir_pasta_debug(self, pasta_debug: str):
        """Define a pasta onde salvar arquivos de debug"""
        self.pasta_debug = pasta_debug
    
    def extrair_resultado(self, resultado: ResultadoOAB) -> ResultadoOAB:
        """
        üîß VERS√ÉO CORRIGIDA - Extrai dados do resultado da consulta
        M√∫ltiplas estrat√©gias para encontrar resultados
        
        Args:
            resultado: Objeto ResultadoOAB para preencher
            
        Returns:
            ResultadoOAB atualizado com dados extra√≠dos
        """
        try:
            print(f"üîç Extraindo resultado para OAB {resultado.inscricao}/{resultado.estado}")
            
            # Aguardar p√°gina estabilizar
            time.sleep(3)
            
            # üîß ESTRAT√âGIA 1: Verificar se h√° mensagem de erro primeiro
            if self._verificar_mensagem_erro():
                resultado.erro = "Inscri√ß√£o n√£o encontrada"
                print("‚ö†Ô∏è Mensagem de erro detectada na p√°gina")
                return resultado
            
            # üîß ESTRAT√âGIA 2: Buscar resultado usando m√∫ltiplos seletores
            elemento_resultado = self._buscar_elemento_resultado()
            
            if elemento_resultado:
                print("‚úÖ Elemento de resultado encontrado!")
                
                # Extrair dados b√°sicos
                resultado = self._extrair_dados_basicos_melhorado(elemento_resultado, resultado)
                
                # üîß ESTRAT√âGIA 3: Tentar abrir modal de detalhes
                if self._tentar_abrir_detalhes(elemento_resultado):
                    print("üñºÔ∏è Modal de detalhes aberto - aplicando OCR...")
                    resultado = self._extrair_dados_modal_ocr(resultado)
                    self._fechar_modal()
                else:
                    print("‚ö†Ô∏è N√£o conseguiu abrir modal, usando dados b√°sicos")
                
                resultado.sucesso = True
                print(f"‚úÖ Extra√ß√£o conclu√≠da: {resultado.nome}")
                
            else:
                # üîß ESTRAT√âGIA 4: Buscar dados em toda a p√°gina
                print("üîç Elemento espec√≠fico n√£o encontrado, analisando p√°gina completa...")
                
                if self._extrair_dados_pagina_completa(resultado):
                    resultado.sucesso = True
                    print(f"‚úÖ Dados encontrados na p√°gina: {resultado.nome}")
                else:
                    resultado.erro = "Nenhum resultado encontrado na p√°gina"
                    print("‚ùå Nenhum dado encontrado na p√°gina")
                    
                    # üîß DEBUG: Salvar screenshot e HTML para an√°lise
                    self._salvar_debug_pagina(resultado)
            
        except Exception as e:
            resultado.erro = f"Erro ao extrair resultado: {str(e)}"
            print(f"‚ùå Erro na extra√ß√£o: {str(e)}")
            self._salvar_debug_pagina(resultado)
            
        return resultado
    
    def _verificar_mensagem_erro(self) -> bool:
        """
        üîß NOVO: Verifica se h√° mensagens de erro na p√°gina
        
        Returns:
            True se encontrou mensagem de erro
        """
        try:
            # Textos que indicam erro
            textos_erro = [
                'n√£o encontrado',
                'nenhum resultado',
                'n√£o foi poss√≠vel',
                'n√£o localizado',
                'n√£o existe',
                'inv√°lida',
                'erro',
                'without results',
                'no results'
            ]
            
            # Verificar no texto da p√°gina
            page_text = self.driver.page_source.lower()
            
            for texto in textos_erro:
                if texto in page_text:
                    print(f"üö´ Erro detectado: '{texto}' encontrado na p√°gina")
                    return True
            
            # Verificar elementos espec√≠ficos de erro
            seletores_erro = [
                '.alert-danger',
                '.error',
                '.warning',
                '.no-results',
                '[class*="error"]',
                '[class*="warning"]'
            ]
            
            for seletor in seletores_erro:
                try:
                    elementos = self.driver.find_elements(By.CSS_SELECTOR, seletor)
                    if elementos and any(elem.is_displayed() for elem in elementos):
                        print(f"üö´ Elemento de erro encontrado: {seletor}")
                        return True
                except:
                    continue
            
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar mensagens de erro: {e}")
            return False
    
    def _buscar_elemento_resultado(self):
        """
        üîß VERS√ÉO MELHORADA: Busca elemento de resultado usando m√∫ltiplas estrat√©gias
        
        Returns:
            Elemento encontrado ou None
        """
        try:
            print("üîç Buscando elemento de resultado...")
            
            # Lista de seletores para tentar (do mais espec√≠fico ao mais gen√©rico)
            seletores_resultado = [
                # Seletores espec√≠ficos da OAB
                '.row:has([class*="result"])',
                '.result-item',
                '.search-result',
                '.lawyer-info',
                '.advogado-info',
                
                # Seletores gen√©ricos que podem conter dados
                '.row:contains("Nome:")',
                '.row:contains("Inscri√ß√£o:")',
                '.row:contains("Tipo:")',
                
                # Bootstrap rows com conte√∫do
                '.row:not(:empty)',
                '.container-fluid .row',
                '.panel-body',
                '.card-body',
                
                # Seletores muito gen√©ricos (√∫ltimo recurso)
                'div:contains("Nome:")',
                'div:contains("Inscri√ß√£o:")',
                '*:contains("Nome:")'
            ]
            
            # Tentar cada seletor
            for i, seletor in enumerate(seletores_resultado):
                try:
                    print(f"   Tentativa {i+1}: {seletor}")
                    
                    if ':contains(' in seletor:
                        # Para seletores :contains, usar XPath
                        xpath_seletor = self._converter_contains_para_xpath(seletor)
                        elementos = self.driver.find_elements(By.XPATH, xpath_seletor)
                    else:
                        elementos = self.driver.find_elements(By.CSS_SELECTOR, seletor)
                    
                    # Filtrar elementos vis√≠veis e com conte√∫do relevante
                    for elemento in elementos:
                        if self._elemento_parece_resultado(elemento):
                            print(f"‚úÖ Elemento encontrado com: {seletor}")
                            return elemento
                            
                except Exception as e:
                    print(f"   ‚ùå Erro com seletor {seletor}: {str(e)[:50]}...")
                    continue
            
            # Se n√£o encontrou nada, tentar busca por texto espec√≠fico
            print("üîç Buscando por texto espec√≠fico...")
            return self._buscar_por_texto_especifico()
            
        except Exception as e:
            print(f"‚ùå Erro ao buscar elemento de resultado: {e}")
            return None
    
    def _converter_contains_para_xpath(self, seletor_css: str) -> str:
        """Converte seletor CSS com :contains para XPath"""
        try:
            if ':contains("Nome:")' in seletor_css:
                base = seletor_css.split(':contains')[0]
                if base == 'div':
                    return "//div[contains(text(), 'Nome:')]"
                elif base == '*':
                    return "//*[contains(text(), 'Nome:')]"
                else:
                    return f"//{base}[contains(text(), 'Nome:')]"
            elif ':contains("Inscri√ß√£o:")' in seletor_css:
                base = seletor_css.split(':contains')[0]
                if base == 'div':
                    return "//div[contains(text(), 'Inscri√ß√£o:')]"
                else:
                    return f"//{base}[contains(text(), 'Inscri√ß√£o:')]"
            else:
                return "//div[contains(text(), 'Nome:') or contains(text(), 'Inscri√ß√£o:')]"
        except:
            return "//div[contains(text(), 'Nome:')]"
    
    def _elemento_parece_resultado(self, elemento) -> bool:
        """
        üîß NOVO: Verifica se um elemento parece conter resultado de advogado
        
        Args:
            elemento: Elemento HTML a verificar
            
        Returns:
            True se parece ser resultado
        """
        try:
            if not elemento.is_displayed():
                return False
            
            texto = elemento.text.strip()
            
            if len(texto) < 10:  # Muito pouco texto
                return False
            
            # Palavras-chave que indicam resultado de advogado
            palavras_chave = [
                'nome:', 'inscri', 'tipo:', 'advogad', 'oab',
                'seccional', 'situa√ß√£o', 'regular', 'ativo'
            ]
            
            texto_lower = texto.lower()
            palavras_encontradas = sum(1 for palavra in palavras_chave if palavra in texto_lower)
            
            # Deve ter pelo menos 2 palavras-chave
            if palavras_encontradas >= 2:
                print(f"   ‚úÖ Elemento v√°lido: {palavras_encontradas} palavras-chave, texto: {texto[:100]}...")
                return True
            
            return False
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao verificar elemento: {e}")
            return False
    
    def _buscar_por_texto_especifico(self):
        """
        üîß NOVO: Busca elemento por texto espec√≠fico usando XPath
        
        Returns:
            Elemento encontrado ou None
        """
        try:
            xpaths_busca = [
                "//div[contains(text(), 'Nome:')]",
                "//span[contains(text(), 'Nome:')]",
                "//td[contains(text(), 'Nome:')]",
                "//p[contains(text(), 'Nome:')]",
                "//*[contains(text(), 'Nome:')]",
                "//div[contains(text(), 'Inscri√ß√£o:')]",
                "//*[contains(text(), 'Inscri√ß√£o:')]"
            ]
            
            for xpath in xpaths_busca:
                try:
                    elementos = self.driver.find_elements(By.XPATH, xpath)
                    for elemento in elementos:
                        if self._elemento_parece_resultado(elemento):
                            print(f"‚úÖ Encontrado por XPath: {xpath}")
                            return elemento
                except:
                    continue
            
            return None
            
        except Exception as e:
            print(f"‚ùå Erro na busca por texto: {e}")
            return None
    
    def _extrair_dados_pagina_completa(self, resultado: ResultadoOAB) -> bool:
        """
        üîß NOVO: Extrai dados analisando toda a p√°gina quando elemento espec√≠fico n√£o √© encontrado
        
        Args:
            resultado: Objeto ResultadoOAB
            
        Returns:
            True se encontrou dados
        """
        try:
            print("üîç Analisando p√°gina completa...")
            
            # Obter todo o texto da p√°gina
            page_text = self.driver.page_source
            body_text = self.driver.find_element(By.TAG_NAME, "body").text
            
            print(f"üìÑ Texto da p√°gina: {len(body_text)} caracteres")
            
            # Salvar HTML para debug
            self._salvar_html_debug(page_text, resultado)
            
            # Buscar padr√µes de dados
            dados_encontrados = False
            
            # 1. Buscar nome
            nome = self._extrair_nome_do_texto(body_text)
            if nome:
                resultado.nome = nome
                dados_encontrados = True
                print(f"üìù Nome encontrado: {nome}")
            
            # 2. Buscar tipo
            tipo = self._extrair_tipo_do_texto(body_text)
            if tipo:
                resultado.tipo = tipo
                dados_encontrados = True
                print(f"üè∑Ô∏è Tipo encontrado: {tipo}")
            
            # 3. Buscar situa√ß√£o
            situacao = self._extrair_situacao_do_texto(body_text)
            if situacao:
                resultado.situacao = situacao
                dados_encontrados = True
                print(f"üìä Situa√ß√£o encontrada: {situacao}")
            
            # 4. Buscar telefone
            telefone = self._extrair_telefone_do_texto(body_text)
            if telefone:
                resultado.telefone = telefone
                dados_encontrados = True
                print(f"üìû Telefone encontrado: {telefone}")
            
            # 5. Buscar endere√ßo
            endereco = self._extrair_endereco_do_texto(body_text)
            if endereco:
                resultado.endereco = endereco
                dados_encontrados = True
                print(f"üìç Endere√ßo encontrado: {endereco}")
            
            return dados_encontrados
            
        except Exception as e:
            print(f"‚ùå Erro ao analisar p√°gina completa: {e}")
            return False
    
    def _extrair_nome_do_texto(self, texto: str) -> str:
        """Extrai nome do texto da p√°gina"""
        padroes_nome = [
            r'Nome[:\s]*([A-Z√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á√ë][A-Za-z√°√©√≠√≥√∫√†√®√¨√≤√π√¢√™√Æ√¥√ª√£√µ√ß√±\s]{8,80})',
            r'NOME[:\s]*([A-Z√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á√ë][A-Za-z√°√©√≠√≥√∫√†√®√¨√≤√π√¢√™√Æ√¥√ª√£√µ√ß√±\s]{8,80})',
            # Linha que come√ßa com nome em mai√∫sculas
            r'^([A-Z√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á√ë]{2,}(?:\s+[A-Z√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á√ë]{2,})+)',
        ]
        
        linhas = texto.split('\n')
        
        for padrao in padroes_nome:
            # Buscar em cada linha
            for linha in linhas[:10]:  # Primeiras 10 linhas
                linha = linha.strip()
                match = re.search(padrao, linha, re.MULTILINE)
                if match:
                    nome = match.group(1).strip()
                    if self._validar_nome(nome):
                        return nome
        
        return ""
    
    def _extrair_tipo_do_texto(self, texto: str) -> str:
        """Extrai tipo do texto da p√°gina"""
        padroes_tipo = [
            r'Tipo[:\s]*([A-Za-z\s]{5,30})',
            r'TIPO[:\s]*([A-Za-z\s]{5,30})',
            r'(ADVOGADO|ADVOGADA)',
        ]
        
        for padrao in padroes_tipo:
            match = re.search(padrao, texto, re.IGNORECASE)
            if match:
                tipo = match.group(1).strip()
                if len(tipo) > 3:
                    return tipo
        
        return ""
    
    def _extrair_situacao_do_texto(self, texto: str) -> str:
        """Extrai situa√ß√£o do texto da p√°gina"""
        padroes_situacao = [
            r'Situa√ß√£o[:\s]*([A-Za-z\s]{3,20})',
            r'SITUA√á√ÉO[:\s]*([A-Za-z\s]{3,20})',
            r'(REGULAR|ATIVO|ATIVA|LICENCIADO)',
        ]
        
        for padrao in padroes_situacao:
            match = re.search(padrao, texto, re.IGNORECASE)
            if match:
                situacao = match.group(1).strip()
                if len(situacao) > 2:
                    return situacao.upper()
        
        return ""
    
    def _extrair_telefone_do_texto(self, texto: str) -> str:
        """Extrai telefone do texto da p√°gina"""
        padroes_telefone = [
            r'Telefone[:\s]*\((\d{2})\)\s*(\d{4,5})[-\s]?(\d{4})',
            r'\((\d{2})\)\s*(\d{4,5})[-\s]?(\d{4})',
            r'(\d{2})\s+(\d{4,5})[-\s]?(\d{4})',
        ]
        
        for padrao in padroes_telefone:
            match = re.search(padrao, texto)
            if match:
                if len(match.groups()) == 3:
                    ddd, num1, num2 = match.groups()
                    return f"({ddd}) {num1}-{num2}"
        
        return ""
    
    def _extrair_endereco_do_texto(self, texto: str) -> str:
        """Extrai endere√ßo do texto da p√°gina"""
        padroes_endereco = [
            r'Endere√ßo[:\s]*([^\n]{10,100})',
            r'ENDERE√áO[:\s]*([^\n]{10,100})',
            r'(RUA\s+[^\n]{10,80})',
            r'(AVENIDA\s+[^\n]{10,80})',
        ]
        
        for padrao in padroes_endereco:
            match = re.search(padrao, texto, re.IGNORECASE)
            if match:
                endereco = match.group(1).strip()
                if len(endereco) > 10:
                    return endereco
        
        return ""
    
    def _validar_nome(self, nome: str) -> bool:
        """Valida se √© um nome v√°lido"""
        if not nome or len(nome) < 5 or len(nome) > 100:
            return False
        
        if ' ' not in nome:
            return False
        
        palavras_invalidas = ['INSCRICAO', 'SECCIONAL', 'TELEFONE', 'ENDERECO', 'ADVOGADO', 'SITUACAO']
        if any(palavra in nome.upper() for palavra in palavras_invalidas):
            return False
        
        return True
    
    def _salvar_debug_pagina(self, resultado: ResultadoOAB):
        """Salva debug da p√°gina para an√°lise"""
        try:
            if not self.pasta_debug or not os.path.exists(self.pasta_debug):
                return
            
            # Screenshot
            screenshot_path = os.path.join(
                self.pasta_debug,
                f"debug_pagina_{resultado.inscricao}_{resultado.estado}.png"
            )
            self.driver.save_screenshot(screenshot_path)
            print(f"üì∏ Screenshot salvo: {os.path.basename(screenshot_path)}")
            
            # HTML da p√°gina
            html_path = os.path.join(
                self.pasta_debug,
                f"debug_pagina_{resultado.inscricao}_{resultado.estado}.html"
            )
            with open(html_path, 'w', encoding='utf-8') as f:
                f.write(self.driver.page_source)
            print(f"üìÑ HTML salvo: {os.path.basename(html_path)}")
            
            # Texto da p√°gina
            text_path = os.path.join(
                self.pasta_debug,
                f"debug_texto_{resultado.inscricao}_{resultado.estado}.txt"
            )
            with open(text_path, 'w', encoding='utf-8') as f:
                f.write("TEXTO VIS√çVEL DA P√ÅGINA:\n")
                f.write("="*50 + "\n")
                f.write(self.driver.find_element(By.TAG_NAME, "body").text)
                f.write("\n\n" + "="*50 + "\n")
                f.write("HTML COMPLETO:\n")
                f.write("="*50 + "\n")
                f.write(self.driver.page_source[:5000])  # Primeiros 5000 chars
            print(f"üìù Texto salvo: {os.path.basename(text_path)}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar debug: {e}")
    
    def _salvar_html_debug(self, html_content: str, resultado: ResultadoOAB):
        """Salva HTML para debug"""
        try:
            if self.pasta_debug and os.path.exists(self.pasta_debug):
                caminho = os.path.join(
                    self.pasta_debug,
                    f"pagina_completa_{resultado.inscricao}_{resultado.estado}.html"
                )
                with open(caminho, 'w', encoding='utf-8') as f:
                    f.write(html_content)
                print(f"üìÑ HTML completo salvo: {os.path.basename(caminho)}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar HTML: {e}")
    
    def _extrair_dados_basicos_melhorado(self, elemento, resultado: ResultadoOAB) -> ResultadoOAB:
        """
        üîß VERS√ÉO MELHORADA: Extrai dados b√°sicos do elemento de resultado
        """
        try:
            texto_completo = elemento.text
            print(f"üìã Texto do elemento: {texto_completo[:200]}...")
            
            # Buscar nome com m√∫ltiplos padr√µes
            nome_patterns = [
                r'Nome[:\s]*(.+?)(?:\n|Tipo:|Inscri|$)',
                r'NOME[:\s]*(.+?)(?:\n|TIPO:|INSCRI|$)',
                # Nome em linha separada
                r'\n([A-Z√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á√ë][A-Za-z√°√©√≠√≥√∫√†√®√¨√≤√π√¢√™√Æ√¥√ª√£√µ√ß√±\s]{8,80})\n',
            ]
            
            for pattern in nome_patterns:
                match = re.search(pattern, texto_completo)
                if match:
                    nome = match.group(1).strip()
                    if self._validar_nome(nome):
                        resultado.nome = nome
                        break
            
            # Buscar tipo
            tipo_patterns = [
                r'Tipo[:\s]*(.+?)(?:\n|Inscri|$)',
                r'TIPO[:\s]*(.+?)(?:\n|INSCRI|$)',
            ]
            
            for pattern in tipo_patterns:
                match = re.search(pattern, texto_completo)
                if match:
                    tipo = match.group(1).strip()
                    if len(tipo) > 3 and len(tipo) < 50:
                        resultado.tipo = tipo
                        break
            
            print(f"üìã Dados b√°sicos extra√≠dos: {resultado.nome} - {resultado.tipo}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao extrair dados b√°sicos: {e}")
            
        return resultado
    
    def _tentar_abrir_detalhes(self, elemento) -> bool:
        """
        üîß VERS√ÉO MELHORADA: Tenta abrir modal de detalhes
        """
        try:
            print("üîç Tentando abrir modal de detalhes...")
            
            # Estrat√©gias para clicar no elemento
            estrategias = [
                lambda: elemento.click(),
                lambda: self.driver.execute_script("arguments[0].click();", elemento),
                lambda: self.driver.execute_script("arguments[0].scrollIntoView(); arguments[0].click();", elemento),
            ]
            
            for i, estrategia in enumerate(estrategias, 1):
                try:
                    print(f"   Tentativa {i}...")
                    estrategia()
                    time.sleep(3)  # Aguardar modal carregar
                    
                    # Verificar se modal abriu
                    if self._modal_esta_aberto():
                        print("‚úÖ Modal aberto com sucesso!")
                        return True
                        
                except Exception as e:
                    print(f"   ‚ùå Falha na tentativa {i}: {str(e)[:50]}...")
                    continue
            
            print("‚ö†Ô∏è N√£o conseguiu abrir modal")
            return False
            
        except Exception as e:
            print(f"‚ùå Erro ao tentar abrir detalhes: {e}")
            return False
    
    def _modal_esta_aberto(self) -> bool:
        """Verifica se modal est√° aberto"""
        try:
            seletores_modal = [
                '.modal.show',
                '.modal[style*="display: block"]',
                '.modal-content',
                '#imgDetail',
                '[id*="modal"]',
                '[class*="modal"]'
            ]
            
            for seletor in seletores_modal:
                try:
                    elementos = self.driver.find_elements(By.CSS_SELECTOR, seletor)
                    if elementos and any(elem.is_displayed() for elem in elementos):
                        return True
                except:
                    continue
            
            return False
            
        except:
            return False
    
    def _extrair_dados_modal_ocr(self, resultado: ResultadoOAB) -> ResultadoOAB:
        """
        üîß VERS√ÉO MELHORADA: Extrai dados da modal usando OCR
        """
        try:
            print("üñºÔ∏è Extraindo dados da modal com OCR...")
            
            # Buscar imagem da modal
            imagem_elemento = self._encontrar_imagem_modal()
            
            if not imagem_elemento:
                print("‚ùå Imagem da modal n√£o encontrada")
                return resultado
            
            # Obter URL da imagem
            img_url = imagem_elemento.get_attribute('src')
            if not img_url:
                print("‚ùå URL da imagem n√£o encontrada")
                return resultado
            
            print(f"üì• Baixando imagem: {img_url}")
            
            # Baixar e processar imagem
            imagem_pil = self._baixar_imagem(img_url)
            if not imagem_pil:
                print("‚ùå Erro ao baixar imagem")
                return resultado
            
            # Salvar para debug
            self._salvar_imagem_debug(imagem_pil, resultado)
            
            # Aplicar OCR
            texto_extraido = self._aplicar_ocr_otimizado(imagem_pil)
            
            if texto_extraido:
                print(f"üìù Texto extra√≠do: {len(texto_extraido)} caracteres")
                
                # Processar texto extra√≠do
                resultado = self._processar_texto_ocr(texto_extraido, resultado)
                
                # Salvar texto para debug
                self._salvar_texto_ocr_debug(texto_extraido, resultado)
            else:
                print("‚ùå OCR n√£o conseguiu extrair texto")
            
            return resultado
            
        except Exception as e:
            print(f"‚ùå Erro na extra√ß√£o OCR da modal: {e}")
            return resultado
    
    def _encontrar_imagem_modal(self):
        """Encontra imagem da modal usando m√∫ltiplos seletores"""
        try:
            seletores_imagem = [
                "#imgDetail",
                "img[src*='RenderDetail']",
                ".modal img",
                ".modal-body img",
                ".tab-content img",
                "#divImgDetail img",
                "img[id*='detail']",
                "img[id*='Detail']"
            ]
            
            for seletor in seletores_imagem:
                try:
                    elementos = self.driver.find_elements(By.CSS_SELECTOR, seletor)
                    for elemento in elementos:
                        if elemento.is_displayed():
                            src = elemento.get_attribute('src')
                            if src and ('detail' in src.lower() or 'render' in src.lower()):
                                print(f"‚úÖ Imagem encontrada: {seletor}")
                                return elemento
                except:
                    continue
            
            return None
            
        except Exception as e:
            print(f"‚ùå Erro ao encontrar imagem: {e}")
            return None
    
    def _baixar_imagem(self, img_url: str) -> Image.Image:
        """Baixa imagem da modal"""
        try:
            # Completar URL se relativa
            if img_url.startswith('/'):
                img_url = "https://cna.oab.org.br" + img_url
            
            # Usar cookies do navegador
            cookies = self.driver.get_cookies()
            session = requests.Session()
            
            for cookie in cookies:
                session.cookies.set(cookie['name'], cookie['value'])
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Referer': 'https://cna.oab.org.br/',
                'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8'
            }
            
            response = session.get(img_url, headers=headers, timeout=30)
            response.raise_for_status()
            
            imagem = Image.open(BytesIO(response.content))
            print(f"‚úÖ Imagem baixada: {imagem.size}")
            
            return imagem
            
        except Exception as e:
            print(f"‚ùå Erro ao baixar imagem: {e}")
            return None
    
    def _aplicar_ocr_otimizado(self, imagem: Image.Image) -> str:
        """
        üîß VERS√ÉO OTIMIZADA: Aplica OCR na imagem com m√∫ltiplas tentativas
        """
        try:
            print("üîç Aplicando OCR otimizado...")
            
            # Pr√©-processar imagem
            imagens_processadas = self._preprocessar_imagem_multiplas(imagem)
            
            # Configura√ß√µes de OCR para tentar
            configuracoes = [
                f'--oem 3 --psm 6 -l {self.idioma_ocr}',
                '--oem 3 --psm 4',
                '--oem 3 --psm 11',
                '--oem 3 --psm 12',
                '--psm 6',
                ''  # Configura√ß√£o padr√£o
            ]
            
            melhor_resultado = ""
            melhor_score = 0
            
            for config in configuracoes:
                for nome_img, img_processada in imagens_processadas.items():
                    try:
                        if config:
                            texto = pytesseract.image_to_string(img_processada, config=config)
                        else:
                            texto = pytesseract.image_to_string(img_processada)
                        
                        texto_limpo = self._limpar_texto_ocr(texto)
                        score = self._avaliar_qualidade_ocr(texto_limpo)
                        
                        if score > melhor_score:
                            melhor_resultado = texto_limpo
                            melhor_score = score
                            print(f"   ‚úÖ Novo melhor resultado (score: {score})")
                        
                        if score >= 80:  # Score muito bom
                            break
                            
                    except Exception as e:
                        continue
                
                if melhor_score >= 80:
                    break
            
            print(f"üìù Melhor resultado OCR (score: {melhor_score}): {len(melhor_resultado)} chars")
            return melhor_resultado
            
        except Exception as e:
            print(f"‚ùå Erro no OCR: {e}")
            return ""
    
    def _preprocessar_imagem_multiplas(self, imagem: Image.Image) -> dict:
        """Cria m√∫ltiplas vers√µes processadas da imagem"""
        imagens = {}
        
        try:
            if imagem.mode != 'RGB':
                imagem = imagem.convert('RGB')
            
            # 1. Original redimensionada
            largura, altura = imagem.size
            img_resize = imagem.resize((largura * 2, altura * 2), Image.Resampling.LANCZOS)
            imagens['resize_2x'] = img_resize
            
            # 2. Escala de cinza
            img_gray = img_resize.convert('L')
            imagens['gray'] = img_gray
            
            # 3. Alto contraste
            enhancer = ImageEnhance.Contrast(img_gray)
            img_contrast = enhancer.enhance(2.0)
            imagens['high_contrast'] = img_contrast
            
            # 4. Brightness ajustado
            enhancer_bright = ImageEnhance.Brightness(img_gray)
            img_bright = enhancer_bright.enhance(1.2)
            imagens['bright'] = img_bright
            
            # 5. Sharpening
            img_sharp = img_gray.filter(ImageFilter.SHARPEN)
            imagens['sharp'] = img_sharp
            
            # 6. Vers√£o combinada
            img_combined = img_contrast.filter(ImageFilter.SHARPEN)
            enhancer_final = ImageEnhance.Brightness(img_combined)
            img_final = enhancer_final.enhance(1.1)
            imagens['combined'] = img_final
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no pr√©-processamento: {e}")
            imagens['original'] = imagem
        
        return imagens
    
    def _avaliar_qualidade_ocr(self, texto: str) -> int:
        """Avalia qualidade do texto extra√≠do (0-100)"""
        if not texto or len(texto) < 10:
            return 0
        
        score = 0
        
        # Pontos por comprimento
        if len(texto) >= 50:
            score += 20
        elif len(texto) >= 30:
            score += 10
        
        # Pontos por palavras-chave
        palavras_importantes = ['ADVOGAD', 'INSCRI', 'SECCIONAL', 'SITUA', 'REGULAR', 
                              'ENDERECO', 'TELEFONE', 'PROFISSIONAL']
        
        for palavra in palavras_importantes:
            if palavra in texto.upper():
                score += 8
        
        # Pontos por n√∫meros (inscri√ß√£o)
        if re.search(r'\d{3,}', texto):
            score += 15
        
        # Pontos por estrutura
        linhas = [l.strip() for l in texto.split('\n') if l.strip()]
        if len(linhas) >= 5:
            score += 10
        
        # Penalizar caracteres estranhos
        caracteres_estranhos = len(re.findall(r'[^\w\s:()[\].-/√°√©√≠√≥√∫√†√®√¨√≤√π√¢√™√Æ√¥√ª√£√µ√ß√±√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á√ë]', texto))
        if caracteres_estranhos > len(texto) * 0.1:
            score -= 20
        
        return min(100, max(0, score))
    
    def _limpar_texto_ocr(self, texto: str) -> str:
        """Limpa texto extra√≠do do OCR"""
        if not texto:
            return ""
        
        # Remover caracteres estranhos
        texto = re.sub(r'[^\w\s:()[\].-/√°√©√≠√≥√∫√†√®√¨√≤√π√¢√™√Æ√¥√ª√£√µ√ß√±√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á√ë]', ' ', texto)
        
        # Corrigir espa√ßos m√∫ltiplos
        texto = re.sub(r'\s+', ' ', texto)
        
        # Corrigir quebras de linha
        texto = re.sub(r'\n\s*\n', '\n', texto)
        
        # Remover linhas muito curtas
        linhas = texto.split('\n')
        linhas_validas = []
        
        for linha in linhas:
            linha_limpa = linha.strip()
            if len(linha_limpa) > 1:
                linhas_validas.append(linha_limpa)
        
        return '\n'.join(linhas_validas)
    
    def _processar_texto_ocr(self, texto: str, resultado: ResultadoOAB) -> ResultadoOAB:
        """Processa texto extra√≠do do OCR"""
        try:
            print("üîç Processando texto do OCR...")
            
            # Usar extrator especializado
            extrator = ModalExtractorOCR()
            
            # Nome completo
            nome_melhorado = extrator.extrair_nome_completo(texto)
            if nome_melhorado and len(nome_melhorado) > len(resultado.nome or ''):
                resultado.nome = nome_melhorado
                print(f"‚úÖ Nome atualizado: {resultado.nome}")
            
            # Inscri√ß√£o
            inscricao_modal = extrator.extrair_inscricao(texto, resultado.inscricao)
            if inscricao_modal:
                resultado.numero_carteira = inscricao_modal
                print(f"‚úÖ N√∫mero carteira: {resultado.numero_carteira}")
            
            # Telefones
            telefones = extrator.extrair_telefones(texto)
            if telefones:
                resultado.telefone = telefones
                print(f"‚úÖ Telefones: {resultado.telefone}")
            
            # Endere√ßo
            endereco_prof = extrator.extrair_endereco_profissional(texto)
            if endereco_prof:
                resultado.endereco = endereco_prof
                print(f"‚úÖ Endere√ßo: {resultado.endereco}")
            
            # Situa√ß√£o
            situacao = extrator.extrair_situacao(texto)
            if situacao:
                resultado.situacao = situacao
                print(f"‚úÖ Situa√ß√£o: {resultado.situacao}")
            
            # Email
            email = extrator.extrair_email(texto)
            if email:
                resultado.email = email
                print(f"‚úÖ Email: {resultado.email}")
            
            # Data de inscri√ß√£o
            data_inscricao = extrator.extrair_data_inscricao(texto)
            if data_inscricao:
                resultado.data_inscricao = data_inscricao
                print(f"‚úÖ Data inscri√ß√£o: {resultado.data_inscricao}")
            
            return resultado
            
        except Exception as e:
            print(f"‚ùå Erro ao processar texto OCR: {e}")
            return resultado
    
    def _salvar_imagem_debug(self, imagem: Image.Image, resultado: ResultadoOAB):
        """Salva imagem para debug"""
        try:
            if self.pasta_debug and os.path.exists(self.pasta_debug):
                caminho = os.path.join(
                    self.pasta_debug, 
                    f"modal_imagem_{resultado.inscricao}_{resultado.estado}.png"
                )
                imagem.save(caminho)
                print(f"üñºÔ∏è Imagem salva: {os.path.basename(caminho)}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar imagem: {e}")
    
    def _salvar_texto_ocr_debug(self, texto: str, resultado: ResultadoOAB):
        """Salva texto extra√≠do para debug"""
        try:
            if self.pasta_debug and os.path.exists(self.pasta_debug):
                caminho = os.path.join(
                    self.pasta_debug,
                    f"ocr_texto_{resultado.inscricao}_{resultado.estado}.txt"
                )
                with open(caminho, 'w', encoding='utf-8') as f:
                    f.write("TEXTO EXTRA√çDO VIA OCR:\n")
                    f.write("="*50 + "\n")
                    f.write(texto)
                    f.write("\n\n" + "="*50 + "\n")
                    f.write("DADOS PROCESSADOS:\n")
                    f.write(f"Nome: {resultado.nome}\n")
                    f.write(f"Tipo: {resultado.tipo}\n")
                    f.write(f"Situa√ß√£o: {resultado.situacao}\n")
                    f.write(f"Telefone: {resultado.telefone}\n")
                    f.write(f"Endere√ßo: {resultado.endereco}\n")
                    f.write(f"Email: {resultado.email}\n")
                
                print(f"üìÑ Texto OCR salvo: {os.path.basename(caminho)}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar texto OCR: {e}")
    
    def _fechar_modal(self):
        """Fecha modal de detalhes"""
        try:
            # Bot√µes de fechar
            botoes_fechar = [
                "button.close",
                ".close", 
                "[data-dismiss='modal']",
                "button[onclick*='close']",
                ".modal-header .close",
                "[aria-label='Close']",
                ".btn-close"
            ]
            
            for seletor in botoes_fechar:
                try:
                    botoes = self.driver.find_elements(By.CSS_SELECTOR, seletor)
                    if botoes:
                        botoes[0].click()
                        print("‚úÖ Modal fechada")
                        time.sleep(1)
                        return
                except:
                    continue
            
            # Tentar ESC
            from selenium.webdriver.common.keys import Keys
            self.driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE)
            print("‚úÖ Modal fechada com ESC")
            time.sleep(1)
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao fechar modal: {e}")


class ModalExtractorOCR:
    """Classe para extra√ß√£o de dados do texto extra√≠do via OCR"""
    
    def extrair_nome_completo(self, texto_ocr: str) -> str:
        """Extrai nome completo do texto OCR"""
        padroes_nome = [
            r'^([A-Z√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á√ë][A-Za-z√°√©√≠√≥√∫√†√®√¨√≤√π√¢√™√Æ√¥√ª√£√µ√ß√±\s]{8,60})',
            r'Nome[:\s]*([A-Z√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á√ë][A-Za-z√°√©√≠√≥√∫√†√®√¨√≤√π√¢√™√Æ√¥√ª√£√µ√ß√±\s]{5,60})',
            r'([A-Z√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á√ë]{2,}(?:\s+[A-Z√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á√ë]{2,})+)',
        ]
        
        linhas = texto_ocr.split('\n')
        
        for linha in linhas[:5]:
            linha = linha.strip()
            for padrao in padroes_nome:
                match = re.search(padrao, linha, re.MULTILINE)
                if match:
                    nome = match.group(1).strip()
                    
                    if (8 <= len(nome) <= 60 and 
                        ' ' in nome and 
                        len(nome.split()) >= 2 and
                        not any(palavra in nome.upper() for palavra in 
                               ['INSCRICAO', 'SECCIONAL', 'TELEFONE', 'ENDERECO']) and
                        all(char.isalpha() or char.isspace() or char in '√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á√ë' 
                            for char in nome)):
                        return nome
        
        return ""

    def extrair_inscricao(self, texto_ocr: str, inscricao_original: str) -> str:
        """Extrai n√∫mero da inscri√ß√£o do texto OCR"""
        padroes_inscricao = [
            r'Inscri[c√ß][a√£]o[:\s]*(\d{4,8})',
            r'N[u√∫]mero[:\s]*(\d{4,8})',
            rf'({re.escape(inscricao_original)})',
        ]
        
        for padrao in padroes_inscricao:
            match = re.search(padrao, texto_ocr, re.IGNORECASE)
            if match:
                numero = match.group(1)
                if numero.isdigit() and 4 <= len(numero) <= 8:
                    return numero
        
        return inscricao_original

    def extrair_telefones(self, texto_ocr: str) -> str:
        """Extrai telefones do texto OCR"""
        telefones_encontrados = []
        
        try:
            padroes_telefone = [
                r'Telefone\s*Profissional[:\s]*\((\d{2})\)\s*(\d{4,5})[-\s]?(\d{4})',
                r'Telefone[:\s]*\((\d{2})\)\s*(\d{4,5})[-\s]?(\d{4})',
                r'\((\d{2})\)\s*(\d{4,5})[-\s]?(\d{4})',
                r'(\d{2})\s+(\d{4,5})[-\s]?(\d{4})',
            ]
            
            for padrao in padroes_telefone:
                matches = re.finditer(padrao, texto_ocr, re.IGNORECASE)
                for match in matches:
                    if len(match.groups()) == 3:
                        ddd, num1, num2 = match.groups()
                        telefone = f"({ddd}) {num1}-{num2}"
                        
                        if (len(ddd) == 2 and ddd.isdigit() and 
                            len(num1) in [4, 5] and num1.isdigit() and 
                            len(num2) == 4 and num2.isdigit()):
                            
                            if telefone not in telefones_encontrados:
                                telefones_encontrados.append(telefone)
            
            return " | ".join(telefones_encontrados) if telefones_encontrados else ""
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao extrair telefones: {e}")
            return ""

    def extrair_endereco_profissional(self, texto_ocr: str) -> str:
        """Extrai endere√ßo profissional do texto OCR"""
        try:
            padroes_endereco = [
                r'Endere[c√ß]o\s+Profissional[:\s]*([^\n]+?)(?:Telefone|$)',
                r'Endere[c√ß]o[:\s]*([^\n]+?)(?:Telefone|$)',
                r'(RUA\s+[^,\n]+(?:,\s*N[¬∞¬∫]?\s*\d+)?[^,\n]*)',
                r'(AVENIDA\s+[^,\n]+(?:,\s*N[¬∞¬∫]?\s*\d+)?[^,\n]*)',
            ]
            
            for padrao in padroes_endereco:
                match = re.search(padrao, texto_ocr, re.IGNORECASE)
                if match:
                    endereco = match.group(1).strip()
                    
                    # Limpar telefones do endere√ßo
                    endereco = re.sub(r'Telefone[:\s]*\([0-9\s\)\(-]+', '', endereco, flags=re.IGNORECASE)
                    endereco = re.sub(r'\(\d{2}\)\s*\d{4,5}[-\s]?\d{4}', '', endereco)
                    
                    if 10 <= len(endereco) <= 200:
                        return endereco.strip()
            
            return ""
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao extrair endere√ßo: {e}")
            return ""

    def extrair_situacao(self, texto_ocr: str) -> str:
        """Extrai situa√ß√£o do advogado"""
        padroes_situacao = [
            r'SITUA[C√á][A√É]O\s+REGULAR',
            r'REGULAR',
            r'SITUA[C√á][A√É]O[:\s]*([A-Z\s]+)',
            r'(ATIVO|ATIVA|LICENCIADO|LICENCIADA)',
        ]
        
        for padrao in padroes_situacao:
            match = re.search(padrao, texto_ocr, re.IGNORECASE)
            if match:
                if padrao in [r'SITUA[C√á][A√É]O\s+REGULAR', r'REGULAR']:
                    return 'SITUA√á√ÉO REGULAR'
                
                situacao = match.group(1) if match.groups() else match.group(0)
                situacao = situacao.strip().upper()
                
                if 'REGULAR' in situacao:
                    return 'SITUA√á√ÉO REGULAR'
                elif situacao in ['ATIVO', 'ATIVA']:
                    return 'ATIVO'
                elif 4 <= len(situacao) <= 30:
                    return situacao
        
        return ""

    def extrair_email(self, texto_ocr: str) -> str:
        """Extrai email do texto OCR"""
        padroes_email = [
            r'Email[:\s]*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})',
            r'E-mail[:\s]*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})',
            r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})',
        ]
        
        for padrao in padroes_email:
            match = re.search(padrao, texto_ocr, re.IGNORECASE)
            if match:
                email = match.group(1) if match.groups() else match.group(0)
                email = email.strip().lower()
                
                if ('@' in email and '.' in email and 
                    5 <= len(email) <= 100 and
                    not any(char in email for char in [' ', '\n', '\t'])):
                    return email
        
        return ""

    def extrair_data_inscricao(self, texto_ocr: str) -> str:
        """Extrai data de inscri√ß√£o"""
        padroes_data = [
            r'Data[:\s]*Inscri[c√ß][a√£]o[:\s]*(\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4})',
            r'Inscrito\s+em[:\s]*(\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4})',
            r'(\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4})',
        ]
        
        for padrao in padroes_data:
            match = re.search(padrao, texto_ocr, re.IGNORECASE)
            if match:
                data = match.group(1) if match.groups() else match.group(0)
                data = data.strip()
                
                if re.match(r'\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4}', data):
                    return data
        
        return ""